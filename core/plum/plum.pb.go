// Code generated by protoc-gen-go. DO NOT EDIT.
// source: plum.proto

package plum

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type PBFTPhase int32

const (
	PBFTPhase_PBFTRoundChange PBFTPhase = 0
	PBFTPhase_PBFTNewRound    PBFTPhase = 1
	PBFTPhase_PBFTPrePrepare  PBFTPhase = 2
	PBFTPhase_PBFTPrepare     PBFTPhase = 3
	PBFTPhase_PBFTCommit      PBFTPhase = 4
)

var PBFTPhase_name = map[int32]string{
	0: "PBFTRoundChange",
	1: "PBFTNewRound",
	2: "PBFTPrePrepare",
	3: "PBFTPrepare",
	4: "PBFTCommit",
}

var PBFTPhase_value = map[string]int32{
	"PBFTRoundChange": 0,
	"PBFTNewRound":    1,
	"PBFTPrePrepare":  2,
	"PBFTPrepare":     3,
	"PBFTCommit":      4,
}

func (x PBFTPhase) String() string {
	return proto.EnumName(PBFTPhase_name, int32(x))
}

func (PBFTPhase) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6954aaea537d5982, []int{0}
}

type XBFTPhase int32

const (
	XBFTPhase_XBFTRoundChange XBFTPhase = 0
	XBFTPhase_XBFTPrePrepare  XBFTPhase = 1
	XBFTPhase_XBFTPrepare     XBFTPhase = 2
	XBFTPhase_XBFTCommit      XBFTPhase = 3
	XBFTPhase_XBFTSelect      XBFTPhase = 4
	XBFTPhase_XBFTNewRound    XBFTPhase = 5
)

var XBFTPhase_name = map[int32]string{
	0: "XBFTRoundChange",
	1: "XBFTPrePrepare",
	2: "XBFTPrepare",
	3: "XBFTCommit",
	4: "XBFTSelect",
	5: "XBFTNewRound",
}

var XBFTPhase_value = map[string]int32{
	"XBFTRoundChange": 0,
	"XBFTPrePrepare":  1,
	"XBFTPrepare":     2,
	"XBFTCommit":      3,
	"XBFTSelect":      4,
	"XBFTNewRound":    5,
}

func (x XBFTPhase) String() string {
	return proto.EnumName(XBFTPhase_name, int32(x))
}

func (XBFTPhase) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6954aaea537d5982, []int{1}
}

type ConsensusState int32

const (
	ConsensusState_Idle        ConsensusState = 0
	ConsensusState_PrePrepared ConsensusState = 1
	ConsensusState_Prepared    ConsensusState = 2
	ConsensusState_Committed   ConsensusState = 3
	ConsensusState_Selected    ConsensusState = 4
)

var ConsensusState_name = map[int32]string{
	0: "Idle",
	1: "PrePrepared",
	2: "Prepared",
	3: "Committed",
	4: "Selected",
}

var ConsensusState_value = map[string]int32{
	"Idle":        0,
	"PrePrepared": 1,
	"Prepared":    2,
	"Committed":   3,
	"Selected":    4,
}

func (x ConsensusState) String() string {
	return proto.EnumName(ConsensusState_name, int32(x))
}

func (ConsensusState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6954aaea537d5982, []int{2}
}

type ResponseStatus int32

const (
	ResponseStatus_Success ResponseStatus = 0
	ResponseStatus_Failed  ResponseStatus = 1
)

var ResponseStatus_name = map[int32]string{
	0: "Success",
	1: "Failed",
}

var ResponseStatus_value = map[string]int32{
	"Success": 0,
	"Failed":  1,
}

func (x ResponseStatus) String() string {
	return proto.EnumName(ResponseStatus_name, int32(x))
}

func (ResponseStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6954aaea537d5982, []int{3}
}

type ConsensusValidationCode int32

const (
	ConsensusValidationCode_TimeOut      ConsensusValidationCode = 0
	ConsensusValidationCode_Invalid      ConsensusValidationCode = 1
	ConsensusValidationCode_BadRequest   ConsensusValidationCode = 2
	ConsensusValidationCode_BadResponse  ConsensusValidationCode = 3
	ConsensusValidationCode_RoundTooFast ConsensusValidationCode = 4
)

var ConsensusValidationCode_name = map[int32]string{
	0: "TimeOut",
	1: "Invalid",
	2: "BadRequest",
	3: "BadResponse",
	4: "RoundTooFast",
}

var ConsensusValidationCode_value = map[string]int32{
	"TimeOut":      0,
	"Invalid":      1,
	"BadRequest":   2,
	"BadResponse":  3,
	"RoundTooFast": 4,
}

func (x ConsensusValidationCode) String() string {
	return proto.EnumName(ConsensusValidationCode_name, int32(x))
}

func (ConsensusValidationCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6954aaea537d5982, []int{4}
}

type ConsensusRole int32

const (
	ConsensusRole_Primary         ConsensusRole = 0
	ConsensusRole_Backup          ConsensusRole = 1
	ConsensusRole_CommitteeMember ConsensusRole = 2
)

var ConsensusRole_name = map[int32]string{
	0: "Primary",
	1: "Backup",
	2: "CommitteeMember",
}

var ConsensusRole_value = map[string]int32{
	"Primary":         0,
	"Backup":          1,
	"CommitteeMember": 2,
}

func (x ConsensusRole) String() string {
	return proto.EnumName(ConsensusRole_name, int32(x))
}

func (ConsensusRole) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6954aaea537d5982, []int{5}
}

type Ping struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Ping) Reset()         { *m = Ping{} }
func (m *Ping) String() string { return proto.CompactTextString(m) }
func (*Ping) ProtoMessage()    {}
func (*Ping) Descriptor() ([]byte, []int) {
	return fileDescriptor_6954aaea537d5982, []int{0}
}

func (m *Ping) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Ping.Unmarshal(m, b)
}
func (m *Ping) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Ping.Marshal(b, m, deterministic)
}
func (m *Ping) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ping.Merge(m, src)
}
func (m *Ping) XXX_Size() int {
	return xxx_messageInfo_Ping.Size(m)
}
func (m *Ping) XXX_DiscardUnknown() {
	xxx_messageInfo_Ping.DiscardUnknown(m)
}

var xxx_messageInfo_Ping proto.InternalMessageInfo

func (m *Ping) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Pong struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Pong) Reset()         { *m = Pong{} }
func (m *Pong) String() string { return proto.CompactTextString(m) }
func (*Pong) ProtoMessage()    {}
func (*Pong) Descriptor() ([]byte, []int) {
	return fileDescriptor_6954aaea537d5982, []int{1}
}

func (m *Pong) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Pong.Unmarshal(m, b)
}
func (m *Pong) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Pong.Marshal(b, m, deterministic)
}
func (m *Pong) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Pong.Merge(m, src)
}
func (m *Pong) XXX_Size() int {
	return xxx_messageInfo_Pong.Size(m)
}
func (m *Pong) XXX_DiscardUnknown() {
	xxx_messageInfo_Pong.DiscardUnknown(m)
}

var xxx_messageInfo_Pong proto.InternalMessageInfo

func (m *Pong) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type PublicKey struct {
	Id                   uint32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Ipv4                 string   `protobuf:"bytes,2,opt,name=ipv4,proto3" json:"ipv4,omitempty"`
	Port                 string   `protobuf:"bytes,3,opt,name=port,proto3" json:"port,omitempty"`
	Key                  []byte   `protobuf:"bytes,4,opt,name=key,proto3" json:"key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PublicKey) Reset()         { *m = PublicKey{} }
func (m *PublicKey) String() string { return proto.CompactTextString(m) }
func (*PublicKey) ProtoMessage()    {}
func (*PublicKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_6954aaea537d5982, []int{2}
}

func (m *PublicKey) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PublicKey.Unmarshal(m, b)
}
func (m *PublicKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PublicKey.Marshal(b, m, deterministic)
}
func (m *PublicKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublicKey.Merge(m, src)
}
func (m *PublicKey) XXX_Size() int {
	return xxx_messageInfo_PublicKey.Size(m)
}
func (m *PublicKey) XXX_DiscardUnknown() {
	xxx_messageInfo_PublicKey.DiscardUnknown(m)
}

var xxx_messageInfo_PublicKey proto.InternalMessageInfo

func (m *PublicKey) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *PublicKey) GetIpv4() string {
	if m != nil {
		return m.Ipv4
	}
	return ""
}

func (m *PublicKey) GetPort() string {
	if m != nil {
		return m.Port
	}
	return ""
}

func (m *PublicKey) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

type PeerState struct {
	Id                     uint32          `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Ipv4                   string          `protobuf:"bytes,2,opt,name=ipv4,proto3" json:"ipv4,omitempty"`
	Port                   string          `protobuf:"bytes,3,opt,name=port,proto3" json:"port,omitempty"`
	Role                   ConsensusRole   `protobuf:"varint,4,opt,name=role,proto3,enum=plum.ConsensusRole" json:"role,omitempty"`
	ConsensusRound         uint64          `protobuf:"varint,5,opt,name=consensusRound,proto3" json:"consensusRound,omitempty"`
	CurrentPrimary         uint32          `protobuf:"varint,6,opt,name=currentPrimary,proto3" json:"currentPrimary,omitempty"`
	ConsensusPhase         PBFTPhase       `protobuf:"varint,7,opt,name=consensusPhase,proto3,enum=plum.PBFTPhase" json:"consensusPhase,omitempty"`
	Vote                   map[int32]int32 `protobuf:"bytes,8,rep,name=vote,proto3" json:"vote,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	ConsensusState         ConsensusState  `protobuf:"varint,9,opt,name=consensusState,proto3,enum=plum.ConsensusState" json:"consensusState,omitempty"`
	BlockHeight            uint64          `protobuf:"varint,10,opt,name=blockHeight,proto3" json:"blockHeight,omitempty"`
	QueueLength            uint64          `protobuf:"varint,11,opt,name=queueLength,proto3" json:"queueLength,omitempty"`
	HeapLength             int64           `protobuf:"varint,12,opt,name=heapLength,proto3" json:"heapLength,omitempty"`
	Reputation             float64         `protobuf:"fixed64,13,opt,name=reputation,proto3" json:"reputation,omitempty"`
	SelectedCount          uint64          `protobuf:"varint,14,opt,name=selectedCount,proto3" json:"selectedCount,omitempty"`
	TentativeSelectedCount uint64          `protobuf:"varint,15,opt,name=tentativeSelectedCount,proto3" json:"tentativeSelectedCount,omitempty"`
	XXX_NoUnkeyedLiteral   struct{}        `json:"-"`
	XXX_unrecognized       []byte          `json:"-"`
	XXX_sizecache          int32           `json:"-"`
}

func (m *PeerState) Reset()         { *m = PeerState{} }
func (m *PeerState) String() string { return proto.CompactTextString(m) }
func (*PeerState) ProtoMessage()    {}
func (*PeerState) Descriptor() ([]byte, []int) {
	return fileDescriptor_6954aaea537d5982, []int{3}
}

func (m *PeerState) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PeerState.Unmarshal(m, b)
}
func (m *PeerState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PeerState.Marshal(b, m, deterministic)
}
func (m *PeerState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PeerState.Merge(m, src)
}
func (m *PeerState) XXX_Size() int {
	return xxx_messageInfo_PeerState.Size(m)
}
func (m *PeerState) XXX_DiscardUnknown() {
	xxx_messageInfo_PeerState.DiscardUnknown(m)
}

var xxx_messageInfo_PeerState proto.InternalMessageInfo

func (m *PeerState) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *PeerState) GetIpv4() string {
	if m != nil {
		return m.Ipv4
	}
	return ""
}

func (m *PeerState) GetPort() string {
	if m != nil {
		return m.Port
	}
	return ""
}

func (m *PeerState) GetRole() ConsensusRole {
	if m != nil {
		return m.Role
	}
	return ConsensusRole_Primary
}

func (m *PeerState) GetConsensusRound() uint64 {
	if m != nil {
		return m.ConsensusRound
	}
	return 0
}

func (m *PeerState) GetCurrentPrimary() uint32 {
	if m != nil {
		return m.CurrentPrimary
	}
	return 0
}

func (m *PeerState) GetConsensusPhase() PBFTPhase {
	if m != nil {
		return m.ConsensusPhase
	}
	return PBFTPhase_PBFTRoundChange
}

func (m *PeerState) GetVote() map[int32]int32 {
	if m != nil {
		return m.Vote
	}
	return nil
}

func (m *PeerState) GetConsensusState() ConsensusState {
	if m != nil {
		return m.ConsensusState
	}
	return ConsensusState_Idle
}

func (m *PeerState) GetBlockHeight() uint64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *PeerState) GetQueueLength() uint64 {
	if m != nil {
		return m.QueueLength
	}
	return 0
}

func (m *PeerState) GetHeapLength() int64 {
	if m != nil {
		return m.HeapLength
	}
	return 0
}

func (m *PeerState) GetReputation() float64 {
	if m != nil {
		return m.Reputation
	}
	return 0
}

func (m *PeerState) GetSelectedCount() uint64 {
	if m != nil {
		return m.SelectedCount
	}
	return 0
}

func (m *PeerState) GetTentativeSelectedCount() uint64 {
	if m != nil {
		return m.TentativeSelectedCount
	}
	return 0
}

//Empty is for message without content
type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_6954aaea537d5982, []int{4}
}

func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (m *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(m, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

//bytes is []byte in golang
type Envelope struct {
	Payload              []byte   `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	Signature            []byte   `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Envelope) Reset()         { *m = Envelope{} }
func (m *Envelope) String() string { return proto.CompactTextString(m) }
func (*Envelope) ProtoMessage()    {}
func (*Envelope) Descriptor() ([]byte, []int) {
	return fileDescriptor_6954aaea537d5982, []int{5}
}

func (m *Envelope) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Envelope.Unmarshal(m, b)
}
func (m *Envelope) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Envelope.Marshal(b, m, deterministic)
}
func (m *Envelope) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Envelope.Merge(m, src)
}
func (m *Envelope) XXX_Size() int {
	return xxx_messageInfo_Envelope.Size(m)
}
func (m *Envelope) XXX_DiscardUnknown() {
	xxx_messageInfo_Envelope.DiscardUnknown(m)
}

var xxx_messageInfo_Envelope proto.InternalMessageInfo

func (m *Envelope) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *Envelope) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

type PBFTRequest struct {
	Message              *PBFTMessage `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Signature            []byte       `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	Block                *Block       `protobuf:"bytes,3,opt,name=block,proto3" json:"block,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *PBFTRequest) Reset()         { *m = PBFTRequest{} }
func (m *PBFTRequest) String() string { return proto.CompactTextString(m) }
func (*PBFTRequest) ProtoMessage()    {}
func (*PBFTRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6954aaea537d5982, []int{6}
}

func (m *PBFTRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PBFTRequest.Unmarshal(m, b)
}
func (m *PBFTRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PBFTRequest.Marshal(b, m, deterministic)
}
func (m *PBFTRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PBFTRequest.Merge(m, src)
}
func (m *PBFTRequest) XXX_Size() int {
	return xxx_messageInfo_PBFTRequest.Size(m)
}
func (m *PBFTRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PBFTRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PBFTRequest proto.InternalMessageInfo

func (m *PBFTRequest) GetMessage() *PBFTMessage {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *PBFTRequest) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *PBFTRequest) GetBlock() *Block {
	if m != nil {
		return m.Block
	}
	return nil
}

type PBFTResponse struct {
	Status ResponseStatus `protobuf:"varint,1,opt,name=status,proto3,enum=plum.ResponseStatus" json:"status,omitempty"`
	// Types that are valid to be assigned to Result:
	//	*PBFTResponse_Msg
	//	*PBFTResponse_Error
	Result               isPBFTResponse_Result `protobuf_oneof:"result"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *PBFTResponse) Reset()         { *m = PBFTResponse{} }
func (m *PBFTResponse) String() string { return proto.CompactTextString(m) }
func (*PBFTResponse) ProtoMessage()    {}
func (*PBFTResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6954aaea537d5982, []int{7}
}

func (m *PBFTResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PBFTResponse.Unmarshal(m, b)
}
func (m *PBFTResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PBFTResponse.Marshal(b, m, deterministic)
}
func (m *PBFTResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PBFTResponse.Merge(m, src)
}
func (m *PBFTResponse) XXX_Size() int {
	return xxx_messageInfo_PBFTResponse.Size(m)
}
func (m *PBFTResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PBFTResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PBFTResponse proto.InternalMessageInfo

func (m *PBFTResponse) GetStatus() ResponseStatus {
	if m != nil {
		return m.Status
	}
	return ResponseStatus_Success
}

type isPBFTResponse_Result interface {
	isPBFTResponse_Result()
}

type PBFTResponse_Msg struct {
	Msg []byte `protobuf:"bytes,2,opt,name=msg,proto3,oneof"`
}

type PBFTResponse_Error struct {
	Error ConsensusValidationCode `protobuf:"varint,3,opt,name=error,proto3,enum=plum.ConsensusValidationCode,oneof"`
}

func (*PBFTResponse_Msg) isPBFTResponse_Result() {}

func (*PBFTResponse_Error) isPBFTResponse_Result() {}

func (m *PBFTResponse) GetResult() isPBFTResponse_Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *PBFTResponse) GetMsg() []byte {
	if x, ok := m.GetResult().(*PBFTResponse_Msg); ok {
		return x.Msg
	}
	return nil
}

func (m *PBFTResponse) GetError() ConsensusValidationCode {
	if x, ok := m.GetResult().(*PBFTResponse_Error); ok {
		return x.Error
	}
	return ConsensusValidationCode_TimeOut
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*PBFTResponse) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*PBFTResponse_Msg)(nil),
		(*PBFTResponse_Error)(nil),
	}
}

type PBFTMessage struct {
	Phase                PBFTPhase `protobuf:"varint,1,opt,name=phase,proto3,enum=plum.PBFTPhase" json:"phase,omitempty"`
	Round                uint64    `protobuf:"varint,2,opt,name=round,proto3" json:"round,omitempty"`
	Digest               []byte    `protobuf:"bytes,3,opt,name=digest,proto3" json:"digest,omitempty"`
	PeerId               uint32    `protobuf:"varint,4,opt,name=peerId,proto3" json:"peerId,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *PBFTMessage) Reset()         { *m = PBFTMessage{} }
func (m *PBFTMessage) String() string { return proto.CompactTextString(m) }
func (*PBFTMessage) ProtoMessage()    {}
func (*PBFTMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_6954aaea537d5982, []int{8}
}

func (m *PBFTMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PBFTMessage.Unmarshal(m, b)
}
func (m *PBFTMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PBFTMessage.Marshal(b, m, deterministic)
}
func (m *PBFTMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PBFTMessage.Merge(m, src)
}
func (m *PBFTMessage) XXX_Size() int {
	return xxx_messageInfo_PBFTMessage.Size(m)
}
func (m *PBFTMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_PBFTMessage.DiscardUnknown(m)
}

var xxx_messageInfo_PBFTMessage proto.InternalMessageInfo

func (m *PBFTMessage) GetPhase() PBFTPhase {
	if m != nil {
		return m.Phase
	}
	return PBFTPhase_PBFTRoundChange
}

func (m *PBFTMessage) GetRound() uint64 {
	if m != nil {
		return m.Round
	}
	return 0
}

func (m *PBFTMessage) GetDigest() []byte {
	if m != nil {
		return m.Digest
	}
	return nil
}

func (m *PBFTMessage) GetPeerId() uint32 {
	if m != nil {
		return m.PeerId
	}
	return 0
}

type XBFTRequest struct {
	Message              *XBFTMessage `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Signature            []byte       `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	Block                *Block       `protobuf:"bytes,3,opt,name=block,proto3" json:"block,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *XBFTRequest) Reset()         { *m = XBFTRequest{} }
func (m *XBFTRequest) String() string { return proto.CompactTextString(m) }
func (*XBFTRequest) ProtoMessage()    {}
func (*XBFTRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6954aaea537d5982, []int{9}
}

func (m *XBFTRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_XBFTRequest.Unmarshal(m, b)
}
func (m *XBFTRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_XBFTRequest.Marshal(b, m, deterministic)
}
func (m *XBFTRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_XBFTRequest.Merge(m, src)
}
func (m *XBFTRequest) XXX_Size() int {
	return xxx_messageInfo_XBFTRequest.Size(m)
}
func (m *XBFTRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_XBFTRequest.DiscardUnknown(m)
}

var xxx_messageInfo_XBFTRequest proto.InternalMessageInfo

func (m *XBFTRequest) GetMessage() *XBFTMessage {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *XBFTRequest) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *XBFTRequest) GetBlock() *Block {
	if m != nil {
		return m.Block
	}
	return nil
}

type XBFTResponse struct {
	Status ResponseStatus `protobuf:"varint,1,opt,name=status,proto3,enum=plum.ResponseStatus" json:"status,omitempty"`
	// Types that are valid to be assigned to Result:
	//	*XBFTResponse_Msg
	//	*XBFTResponse_Error
	Result               isXBFTResponse_Result `protobuf_oneof:"result"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *XBFTResponse) Reset()         { *m = XBFTResponse{} }
func (m *XBFTResponse) String() string { return proto.CompactTextString(m) }
func (*XBFTResponse) ProtoMessage()    {}
func (*XBFTResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6954aaea537d5982, []int{10}
}

func (m *XBFTResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_XBFTResponse.Unmarshal(m, b)
}
func (m *XBFTResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_XBFTResponse.Marshal(b, m, deterministic)
}
func (m *XBFTResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_XBFTResponse.Merge(m, src)
}
func (m *XBFTResponse) XXX_Size() int {
	return xxx_messageInfo_XBFTResponse.Size(m)
}
func (m *XBFTResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_XBFTResponse.DiscardUnknown(m)
}

var xxx_messageInfo_XBFTResponse proto.InternalMessageInfo

func (m *XBFTResponse) GetStatus() ResponseStatus {
	if m != nil {
		return m.Status
	}
	return ResponseStatus_Success
}

type isXBFTResponse_Result interface {
	isXBFTResponse_Result()
}

type XBFTResponse_Msg struct {
	Msg []byte `protobuf:"bytes,2,opt,name=msg,proto3,oneof"`
}

type XBFTResponse_Error struct {
	Error ConsensusValidationCode `protobuf:"varint,3,opt,name=error,proto3,enum=plum.ConsensusValidationCode,oneof"`
}

func (*XBFTResponse_Msg) isXBFTResponse_Result() {}

func (*XBFTResponse_Error) isXBFTResponse_Result() {}

func (m *XBFTResponse) GetResult() isXBFTResponse_Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *XBFTResponse) GetMsg() []byte {
	if x, ok := m.GetResult().(*XBFTResponse_Msg); ok {
		return x.Msg
	}
	return nil
}

func (m *XBFTResponse) GetError() ConsensusValidationCode {
	if x, ok := m.GetResult().(*XBFTResponse_Error); ok {
		return x.Error
	}
	return ConsensusValidationCode_TimeOut
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*XBFTResponse) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*XBFTResponse_Msg)(nil),
		(*XBFTResponse_Error)(nil),
	}
}

type XBFTMessage struct {
	Phase                  XBFTPhase    `protobuf:"varint,1,opt,name=phase,proto3,enum=plum.XBFTPhase" json:"phase,omitempty"`
	Round                  uint64       `protobuf:"varint,2,opt,name=round,proto3" json:"round,omitempty"`
	Height                 uint64       `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"`
	Digest                 []byte       `protobuf:"bytes,4,opt,name=digest,proto3" json:"digest,omitempty"`
	PeerId                 uint32       `protobuf:"varint,5,opt,name=peerId,proto3" json:"peerId,omitempty"`
	SelectionValue         float64      `protobuf:"fixed64,6,opt,name=selectionValue,proto3" json:"selectionValue,omitempty"`
	Proof                  []byte       `protobuf:"bytes,7,opt,name=proof,proto3" json:"proof,omitempty"`
	PrimaryId              uint32       `protobuf:"varint,8,opt,name=primaryId,proto3" json:"primaryId,omitempty"`
	PreparedCertificate    *Certificate `protobuf:"bytes,9,opt,name=preparedCertificate,proto3" json:"preparedCertificate,omitempty"`
	CommittedCertificate   *Certificate `protobuf:"bytes,10,opt,name=committedCertificate,proto3" json:"committedCertificate,omitempty"`
	RoundChangeCertificate *Certificate `protobuf:"bytes,11,opt,name=roundChangeCertificate,proto3" json:"roundChangeCertificate,omitempty"`
	XXX_NoUnkeyedLiteral   struct{}     `json:"-"`
	XXX_unrecognized       []byte       `json:"-"`
	XXX_sizecache          int32        `json:"-"`
}

func (m *XBFTMessage) Reset()         { *m = XBFTMessage{} }
func (m *XBFTMessage) String() string { return proto.CompactTextString(m) }
func (*XBFTMessage) ProtoMessage()    {}
func (*XBFTMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_6954aaea537d5982, []int{11}
}

func (m *XBFTMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_XBFTMessage.Unmarshal(m, b)
}
func (m *XBFTMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_XBFTMessage.Marshal(b, m, deterministic)
}
func (m *XBFTMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_XBFTMessage.Merge(m, src)
}
func (m *XBFTMessage) XXX_Size() int {
	return xxx_messageInfo_XBFTMessage.Size(m)
}
func (m *XBFTMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_XBFTMessage.DiscardUnknown(m)
}

var xxx_messageInfo_XBFTMessage proto.InternalMessageInfo

func (m *XBFTMessage) GetPhase() XBFTPhase {
	if m != nil {
		return m.Phase
	}
	return XBFTPhase_XBFTRoundChange
}

func (m *XBFTMessage) GetRound() uint64 {
	if m != nil {
		return m.Round
	}
	return 0
}

func (m *XBFTMessage) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *XBFTMessage) GetDigest() []byte {
	if m != nil {
		return m.Digest
	}
	return nil
}

func (m *XBFTMessage) GetPeerId() uint32 {
	if m != nil {
		return m.PeerId
	}
	return 0
}

func (m *XBFTMessage) GetSelectionValue() float64 {
	if m != nil {
		return m.SelectionValue
	}
	return 0
}

func (m *XBFTMessage) GetProof() []byte {
	if m != nil {
		return m.Proof
	}
	return nil
}

func (m *XBFTMessage) GetPrimaryId() uint32 {
	if m != nil {
		return m.PrimaryId
	}
	return 0
}

func (m *XBFTMessage) GetPreparedCertificate() *Certificate {
	if m != nil {
		return m.PreparedCertificate
	}
	return nil
}

func (m *XBFTMessage) GetCommittedCertificate() *Certificate {
	if m != nil {
		return m.CommittedCertificate
	}
	return nil
}

func (m *XBFTMessage) GetRoundChangeCertificate() *Certificate {
	if m != nil {
		return m.RoundChangeCertificate
	}
	return nil
}

type CommitteeMembers struct {
	PeerId               uint32   `protobuf:"varint,1,opt,name=peerId,proto3" json:"peerId,omitempty"`
	Round                uint64   `protobuf:"varint,2,opt,name=round,proto3" json:"round,omitempty"`
	SelectionValue       float64  `protobuf:"fixed64,3,opt,name=selectionValue,proto3" json:"selectionValue,omitempty"`
	Proof                []byte   `protobuf:"bytes,4,opt,name=proof,proto3" json:"proof,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CommitteeMembers) Reset()         { *m = CommitteeMembers{} }
func (m *CommitteeMembers) String() string { return proto.CompactTextString(m) }
func (*CommitteeMembers) ProtoMessage()    {}
func (*CommitteeMembers) Descriptor() ([]byte, []int) {
	return fileDescriptor_6954aaea537d5982, []int{12}
}

func (m *CommitteeMembers) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommitteeMembers.Unmarshal(m, b)
}
func (m *CommitteeMembers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommitteeMembers.Marshal(b, m, deterministic)
}
func (m *CommitteeMembers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommitteeMembers.Merge(m, src)
}
func (m *CommitteeMembers) XXX_Size() int {
	return xxx_messageInfo_CommitteeMembers.Size(m)
}
func (m *CommitteeMembers) XXX_DiscardUnknown() {
	xxx_messageInfo_CommitteeMembers.DiscardUnknown(m)
}

var xxx_messageInfo_CommitteeMembers proto.InternalMessageInfo

func (m *CommitteeMembers) GetPeerId() uint32 {
	if m != nil {
		return m.PeerId
	}
	return 0
}

func (m *CommitteeMembers) GetRound() uint64 {
	if m != nil {
		return m.Round
	}
	return 0
}

func (m *CommitteeMembers) GetSelectionValue() float64 {
	if m != nil {
		return m.SelectionValue
	}
	return 0
}

func (m *CommitteeMembers) GetProof() []byte {
	if m != nil {
		return m.Proof
	}
	return nil
}

type Certificate struct {
	Cert                 []*XBFTRequest `protobuf:"bytes,1,rep,name=cert,proto3" json:"cert,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *Certificate) Reset()         { *m = Certificate{} }
func (m *Certificate) String() string { return proto.CompactTextString(m) }
func (*Certificate) ProtoMessage()    {}
func (*Certificate) Descriptor() ([]byte, []int) {
	return fileDescriptor_6954aaea537d5982, []int{13}
}

func (m *Certificate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Certificate.Unmarshal(m, b)
}
func (m *Certificate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Certificate.Marshal(b, m, deterministic)
}
func (m *Certificate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Certificate.Merge(m, src)
}
func (m *Certificate) XXX_Size() int {
	return xxx_messageInfo_Certificate.Size(m)
}
func (m *Certificate) XXX_DiscardUnknown() {
	xxx_messageInfo_Certificate.DiscardUnknown(m)
}

var xxx_messageInfo_Certificate proto.InternalMessageInfo

func (m *Certificate) GetCert() []*XBFTRequest {
	if m != nil {
		return m.Cert
	}
	return nil
}

type Block struct {
	Header                       *Header             `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Body                         *Body               `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
	CommitteeMembers             []*CommitteeMembers `protobuf:"bytes,3,rep,name=committeeMembers,proto3" json:"committeeMembers,omitempty"`
	RoundChangedCommitteeMembers []*CommitteeMembers `protobuf:"bytes,4,rep,name=roundChangedCommitteeMembers,proto3" json:"roundChangedCommitteeMembers,omitempty"`
	XXX_NoUnkeyedLiteral         struct{}            `json:"-"`
	XXX_unrecognized             []byte              `json:"-"`
	XXX_sizecache                int32               `json:"-"`
}

func (m *Block) Reset()         { *m = Block{} }
func (m *Block) String() string { return proto.CompactTextString(m) }
func (*Block) ProtoMessage()    {}
func (*Block) Descriptor() ([]byte, []int) {
	return fileDescriptor_6954aaea537d5982, []int{14}
}

func (m *Block) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Block.Unmarshal(m, b)
}
func (m *Block) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Block.Marshal(b, m, deterministic)
}
func (m *Block) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Block.Merge(m, src)
}
func (m *Block) XXX_Size() int {
	return xxx_messageInfo_Block.Size(m)
}
func (m *Block) XXX_DiscardUnknown() {
	xxx_messageInfo_Block.DiscardUnknown(m)
}

var xxx_messageInfo_Block proto.InternalMessageInfo

func (m *Block) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *Block) GetBody() *Body {
	if m != nil {
		return m.Body
	}
	return nil
}

func (m *Block) GetCommitteeMembers() []*CommitteeMembers {
	if m != nil {
		return m.CommitteeMembers
	}
	return nil
}

func (m *Block) GetRoundChangedCommitteeMembers() []*CommitteeMembers {
	if m != nil {
		return m.RoundChangedCommitteeMembers
	}
	return nil
}

type Header struct {
	Id                   uint64               `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	MerkleRoot           []byte               `protobuf:"bytes,2,opt,name=merkleRoot,proto3" json:"merkleRoot,omitempty"`
	PrevBlockHash        []byte               `protobuf:"bytes,3,opt,name=prevBlockHash,proto3" json:"prevBlockHash,omitempty"`
	Time                 *timestamp.Timestamp `protobuf:"bytes,4,opt,name=time,proto3" json:"time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Header) Reset()         { *m = Header{} }
func (m *Header) String() string { return proto.CompactTextString(m) }
func (*Header) ProtoMessage()    {}
func (*Header) Descriptor() ([]byte, []int) {
	return fileDescriptor_6954aaea537d5982, []int{15}
}

func (m *Header) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Header.Unmarshal(m, b)
}
func (m *Header) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Header.Marshal(b, m, deterministic)
}
func (m *Header) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Header.Merge(m, src)
}
func (m *Header) XXX_Size() int {
	return xxx_messageInfo_Header.Size(m)
}
func (m *Header) XXX_DiscardUnknown() {
	xxx_messageInfo_Header.DiscardUnknown(m)
}

var xxx_messageInfo_Header proto.InternalMessageInfo

func (m *Header) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Header) GetMerkleRoot() []byte {
	if m != nil {
		return m.MerkleRoot
	}
	return nil
}

func (m *Header) GetPrevBlockHash() []byte {
	if m != nil {
		return m.PrevBlockHash
	}
	return nil
}

func (m *Header) GetTime() *timestamp.Timestamp {
	if m != nil {
		return m.Time
	}
	return nil
}

type Body struct {
	MerkleTree           *MerkleTree `protobuf:"bytes,1,opt,name=merkleTree,proto3" json:"merkleTree,omitempty"`
	Txs                  [][]byte    `protobuf:"bytes,2,rep,name=Txs,proto3" json:"Txs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Body) Reset()         { *m = Body{} }
func (m *Body) String() string { return proto.CompactTextString(m) }
func (*Body) ProtoMessage()    {}
func (*Body) Descriptor() ([]byte, []int) {
	return fileDescriptor_6954aaea537d5982, []int{16}
}

func (m *Body) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Body.Unmarshal(m, b)
}
func (m *Body) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Body.Marshal(b, m, deterministic)
}
func (m *Body) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Body.Merge(m, src)
}
func (m *Body) XXX_Size() int {
	return xxx_messageInfo_Body.Size(m)
}
func (m *Body) XXX_DiscardUnknown() {
	xxx_messageInfo_Body.DiscardUnknown(m)
}

var xxx_messageInfo_Body proto.InternalMessageInfo

func (m *Body) GetMerkleTree() *MerkleTree {
	if m != nil {
		return m.MerkleTree
	}
	return nil
}

func (m *Body) GetTxs() [][]byte {
	if m != nil {
		return m.Txs
	}
	return nil
}

type MerkleTree struct {
	Root                 *MerkleNode `protobuf:"bytes,1,opt,name=Root,proto3" json:"Root,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *MerkleTree) Reset()         { *m = MerkleTree{} }
func (m *MerkleTree) String() string { return proto.CompactTextString(m) }
func (*MerkleTree) ProtoMessage()    {}
func (*MerkleTree) Descriptor() ([]byte, []int) {
	return fileDescriptor_6954aaea537d5982, []int{17}
}

func (m *MerkleTree) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MerkleTree.Unmarshal(m, b)
}
func (m *MerkleTree) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MerkleTree.Marshal(b, m, deterministic)
}
func (m *MerkleTree) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MerkleTree.Merge(m, src)
}
func (m *MerkleTree) XXX_Size() int {
	return xxx_messageInfo_MerkleTree.Size(m)
}
func (m *MerkleTree) XXX_DiscardUnknown() {
	xxx_messageInfo_MerkleTree.DiscardUnknown(m)
}

var xxx_messageInfo_MerkleTree proto.InternalMessageInfo

func (m *MerkleTree) GetRoot() *MerkleNode {
	if m != nil {
		return m.Root
	}
	return nil
}

type MerkleNode struct {
	L                    *MerkleNode `protobuf:"bytes,1,opt,name=L,proto3" json:"L,omitempty"`
	R                    *MerkleNode `protobuf:"bytes,2,opt,name=R,proto3" json:"R,omitempty"`
	D                    []byte      `protobuf:"bytes,3,opt,name=D,proto3" json:"D,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *MerkleNode) Reset()         { *m = MerkleNode{} }
func (m *MerkleNode) String() string { return proto.CompactTextString(m) }
func (*MerkleNode) ProtoMessage()    {}
func (*MerkleNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_6954aaea537d5982, []int{18}
}

func (m *MerkleNode) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MerkleNode.Unmarshal(m, b)
}
func (m *MerkleNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MerkleNode.Marshal(b, m, deterministic)
}
func (m *MerkleNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MerkleNode.Merge(m, src)
}
func (m *MerkleNode) XXX_Size() int {
	return xxx_messageInfo_MerkleNode.Size(m)
}
func (m *MerkleNode) XXX_DiscardUnknown() {
	xxx_messageInfo_MerkleNode.DiscardUnknown(m)
}

var xxx_messageInfo_MerkleNode proto.InternalMessageInfo

func (m *MerkleNode) GetL() *MerkleNode {
	if m != nil {
		return m.L
	}
	return nil
}

func (m *MerkleNode) GetR() *MerkleNode {
	if m != nil {
		return m.R
	}
	return nil
}

func (m *MerkleNode) GetD() []byte {
	if m != nil {
		return m.D
	}
	return nil
}

func init() {
	proto.RegisterEnum("plum.PBFTPhase", PBFTPhase_name, PBFTPhase_value)
	proto.RegisterEnum("plum.XBFTPhase", XBFTPhase_name, XBFTPhase_value)
	proto.RegisterEnum("plum.ConsensusState", ConsensusState_name, ConsensusState_value)
	proto.RegisterEnum("plum.ResponseStatus", ResponseStatus_name, ResponseStatus_value)
	proto.RegisterEnum("plum.ConsensusValidationCode", ConsensusValidationCode_name, ConsensusValidationCode_value)
	proto.RegisterEnum("plum.ConsensusRole", ConsensusRole_name, ConsensusRole_value)
	proto.RegisterType((*Ping)(nil), "plum.Ping")
	proto.RegisterType((*Pong)(nil), "plum.Pong")
	proto.RegisterType((*PublicKey)(nil), "plum.PublicKey")
	proto.RegisterType((*PeerState)(nil), "plum.PeerState")
	proto.RegisterMapType((map[int32]int32)(nil), "plum.PeerState.VoteEntry")
	proto.RegisterType((*Empty)(nil), "plum.Empty")
	proto.RegisterType((*Envelope)(nil), "plum.Envelope")
	proto.RegisterType((*PBFTRequest)(nil), "plum.PBFTRequest")
	proto.RegisterType((*PBFTResponse)(nil), "plum.PBFTResponse")
	proto.RegisterType((*PBFTMessage)(nil), "plum.PBFTMessage")
	proto.RegisterType((*XBFTRequest)(nil), "plum.XBFTRequest")
	proto.RegisterType((*XBFTResponse)(nil), "plum.XBFTResponse")
	proto.RegisterType((*XBFTMessage)(nil), "plum.XBFTMessage")
	proto.RegisterType((*CommitteeMembers)(nil), "plum.CommitteeMembers")
	proto.RegisterType((*Certificate)(nil), "plum.Certificate")
	proto.RegisterType((*Block)(nil), "plum.Block")
	proto.RegisterType((*Header)(nil), "plum.Header")
	proto.RegisterType((*Body)(nil), "plum.Body")
	proto.RegisterType((*MerkleTree)(nil), "plum.MerkleTree")
	proto.RegisterType((*MerkleNode)(nil), "plum.MerkleNode")
}

func init() { proto.RegisterFile("plum.proto", fileDescriptor_6954aaea537d5982) }

var fileDescriptor_6954aaea537d5982 = []byte{
	// 1501 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x57, 0xdd, 0x6e, 0x1b, 0xc5,
	0x17, 0xcf, 0xda, 0x6b, 0xc7, 0x3e, 0x76, 0x9c, 0xfd, 0x4f, 0xfb, 0x0f, 0x8b, 0x55, 0x82, 0x59,
	0xa5, 0x10, 0x42, 0x71, 0x23, 0x53, 0x28, 0x42, 0x70, 0x81, 0xd3, 0xb4, 0x09, 0xb4, 0xc5, 0x9a,
	0x84, 0xc8, 0xea, 0x05, 0xd2, 0xc6, 0x7b, 0xe2, 0xac, 0xb2, 0xbb, 0xb3, 0x9d, 0x9d, 0x75, 0x6b,
	0x10, 0x3c, 0x02, 0x12, 0x8f, 0xc4, 0x05, 0x8f, 0xc3, 0x23, 0x20, 0xa1, 0x99, 0xd9, 0xb5, 0xd7,
	0xce, 0x87, 0x2a, 0x24, 0x24, 0xee, 0xf6, 0xfc, 0xce, 0x6f, 0xce, 0xcc, 0xf9, 0x9a, 0x39, 0x0b,
	0x10, 0x07, 0x69, 0xd8, 0x8d, 0x39, 0x13, 0x8c, 0x98, 0xf2, 0xbb, 0xfd, 0xee, 0x98, 0xb1, 0x71,
	0x80, 0xf7, 0x15, 0x76, 0x9a, 0x9e, 0xdd, 0x17, 0x7e, 0x88, 0x89, 0x70, 0xc3, 0x58, 0xd3, 0x9c,
	0x36, 0x98, 0x03, 0x3f, 0x1a, 0x13, 0x02, 0x66, 0xe4, 0x86, 0x68, 0x1b, 0x1d, 0x63, 0xbb, 0x4e,
	0xd5, 0xb7, 0xd3, 0x01, 0x73, 0xc0, 0xa2, 0x31, 0xb1, 0x61, 0x35, 0xc4, 0x24, 0x71, 0xc7, 0xb9,
	0x3a, 0x17, 0x9d, 0xef, 0xa1, 0x3e, 0x48, 0x4f, 0x03, 0x7f, 0xf4, 0x2d, 0x4e, 0x49, 0x0b, 0x4a,
	0xbe, 0xa7, 0x18, 0x6b, 0xb4, 0xe4, 0x7b, 0xd2, 0xa4, 0x1f, 0x4f, 0x1e, 0xd8, 0x25, 0x6d, 0x52,
	0x7e, 0x4b, 0x2c, 0x66, 0x5c, 0xd8, 0x65, 0x8d, 0xc9, 0x6f, 0x62, 0x41, 0xf9, 0x02, 0xa7, 0xb6,
	0xd9, 0x31, 0xb6, 0x9b, 0x54, 0x7e, 0x3a, 0x7f, 0x99, 0x50, 0x1f, 0x20, 0xf2, 0x23, 0xe1, 0x0a,
	0xfc, 0xc7, 0x76, 0x3f, 0x00, 0x93, 0xb3, 0x00, 0x95, 0xe1, 0x56, 0xef, 0x56, 0x57, 0x05, 0x67,
	0x8f, 0x45, 0x09, 0x46, 0x49, 0x9a, 0x50, 0x16, 0x20, 0x55, 0x04, 0xf2, 0x3e, 0xb4, 0x46, 0x73,
	0x38, 0x8d, 0x3c, 0xbb, 0xd2, 0x31, 0xb6, 0x4d, 0xba, 0x84, 0x2a, 0x5e, 0xca, 0x39, 0x46, 0x62,
	0xc0, 0xfd, 0xd0, 0xe5, 0x53, 0xbb, 0xaa, 0x0e, 0xb5, 0x84, 0x92, 0x87, 0x05, 0x7b, 0x83, 0x73,
	0x37, 0x41, 0x7b, 0x55, 0x1d, 0x61, 0x5d, 0x1f, 0x61, 0xd0, 0x7f, 0x7c, 0xac, 0x60, 0xba, 0x44,
	0x23, 0x1f, 0x83, 0x39, 0x61, 0x02, 0xed, 0x5a, 0xa7, 0xbc, 0xdd, 0xe8, 0xbd, 0x9d, 0xd1, 0xf3,
	0x40, 0x74, 0x4f, 0x98, 0xc0, 0xfd, 0x48, 0xf0, 0x29, 0x55, 0x34, 0xf2, 0x65, 0x61, 0x1f, 0xc5,
	0xb0, 0xeb, 0x6a, 0x9f, 0xdb, 0x4b, 0xae, 0x2a, 0x1d, 0x5d, 0xe2, 0x92, 0x0e, 0x34, 0x4e, 0x03,
	0x36, 0xba, 0x38, 0x40, 0x7f, 0x7c, 0x2e, 0x6c, 0x50, 0x2e, 0x17, 0x21, 0xc9, 0x78, 0x99, 0x62,
	0x8a, 0x4f, 0x31, 0x1a, 0x8b, 0x73, 0xbb, 0xa1, 0x19, 0x05, 0x88, 0x6c, 0x02, 0x9c, 0xa3, 0x1b,
	0x67, 0x84, 0x66, 0xc7, 0xd8, 0x2e, 0xd3, 0x02, 0x22, 0xf5, 0x1c, 0xe3, 0x54, 0xb8, 0xc2, 0x67,
	0x91, 0xbd, 0xd6, 0x31, 0xb6, 0x0d, 0x5a, 0x40, 0xc8, 0x16, 0xac, 0x25, 0x18, 0xe0, 0x48, 0xa0,
	0xb7, 0xc7, 0xd2, 0x48, 0xd8, 0x2d, 0xb5, 0xc7, 0x22, 0x48, 0x3e, 0x83, 0x0d, 0x81, 0x91, 0x5c,
	0x32, 0xc1, 0xa3, 0x05, 0xfa, 0xba, 0xa2, 0x5f, 0xa3, 0x6d, 0x3f, 0x84, 0xfa, 0x2c, 0x64, 0x79,
	0x95, 0xc9, 0x32, 0xaa, 0xa8, 0x2a, 0x23, 0xb7, 0xa1, 0x32, 0x71, 0x83, 0x14, 0x55, 0x21, 0x55,
	0xa8, 0x16, 0xbe, 0x28, 0x7d, 0x6e, 0x38, 0xab, 0x50, 0xd9, 0x0f, 0x63, 0x31, 0x75, 0xfa, 0x50,
	0xdb, 0x8f, 0x26, 0x18, 0xb0, 0x18, 0x65, 0x17, 0xc4, 0xee, 0x34, 0x60, 0xae, 0xae, 0xc5, 0x26,
	0xcd, 0x45, 0x72, 0x07, 0xea, 0x89, 0x3f, 0x8e, 0x5c, 0x91, 0x72, 0x6d, 0xac, 0x49, 0xe7, 0x80,
	0xf3, 0x13, 0x34, 0x64, 0xc6, 0x29, 0xbe, 0x4c, 0x31, 0x11, 0xe4, 0xa3, 0xc5, 0x66, 0x6a, 0xf4,
	0xfe, 0x37, 0xaf, 0x8a, 0x67, 0x5a, 0x31, 0xeb, 0xaf, 0x9b, 0x2d, 0x93, 0xf7, 0xa0, 0xa2, 0xd2,
	0xa5, 0xaa, 0xbe, 0xd1, 0x6b, 0x68, 0x43, 0x7d, 0x09, 0x51, 0xad, 0x71, 0x7e, 0x33, 0xa0, 0xa9,
	0x77, 0x4f, 0x62, 0x99, 0x7e, 0x72, 0x0f, 0xaa, 0x89, 0x70, 0x45, 0x9a, 0xa8, 0xdd, 0x67, 0xb5,
	0x92, 0xeb, 0x8f, 0x94, 0x8e, 0x66, 0x1c, 0x42, 0xa0, 0x1c, 0x26, 0x63, 0xbd, 0xf3, 0xc1, 0x0a,
	0x95, 0x02, 0xf9, 0x14, 0x2a, 0xc8, 0x39, 0xe3, 0x6a, 0xd7, 0x56, 0xef, 0x9d, 0xa5, 0x62, 0x3b,
	0x71, 0x03, 0xdf, 0x53, 0xd9, 0xdd, 0x63, 0x1e, 0x1e, 0xac, 0x50, 0xcd, 0xee, 0xd7, 0xa0, 0xca,
	0x31, 0x49, 0x03, 0xe1, 0xfc, 0xa8, 0x03, 0x92, 0x39, 0x4b, 0xee, 0x42, 0x25, 0x56, 0x4d, 0x62,
	0x5c, 0xdd, 0x24, 0x5a, 0x2b, 0xb3, 0xc5, 0x55, 0x6f, 0x96, 0x54, 0xce, 0xb5, 0x40, 0x36, 0xa0,
	0xea, 0xf9, 0x63, 0x4c, 0x74, 0xe7, 0x37, 0x69, 0x26, 0x49, 0x3c, 0x46, 0xe4, 0x87, 0x9e, 0xea,
	0xfe, 0x35, 0x9a, 0x49, 0x32, 0x19, 0xc3, 0x37, 0x48, 0xc6, 0xf0, 0x5f, 0x4b, 0xc6, 0xf0, 0x3f,
	0x96, 0x8c, 0x3f, 0xca, 0x3a, 0x22, 0x37, 0x67, 0x63, 0xf8, 0xc6, 0xd9, 0x38, 0xd7, 0xb7, 0x49,
	0x59, 0xc1, 0x99, 0x54, 0xc8, 0x92, 0x79, 0x4d, 0x96, 0x2a, 0xc5, 0x2c, 0xc9, 0x8b, 0x56, 0xdf,
	0x00, 0x3e, 0x8b, 0x4e, 0x54, 0x8b, 0x56, 0xd5, 0xd5, 0xb1, 0x84, 0xca, 0x53, 0xc4, 0x9c, 0xb1,
	0x33, 0x75, 0xbf, 0x36, 0xa9, 0x16, 0x64, 0x9e, 0x62, 0x7d, 0x13, 0x1f, 0x7a, 0x76, 0x4d, 0x19,
	0x9e, 0x03, 0x64, 0x0f, 0x6e, 0xc5, 0x1c, 0x63, 0x97, 0xa3, 0xb7, 0x87, 0x5c, 0xf8, 0x67, 0xfe,
	0x28, 0xbf, 0x39, 0x67, 0xe9, 0x2f, 0x28, 0xe8, 0x55, 0x6c, 0xb2, 0x0f, 0xb7, 0x47, 0x2c, 0x0c,
	0x7d, 0x21, 0x16, 0xad, 0xc0, 0x75, 0x56, 0xae, 0xa4, 0x93, 0x43, 0xd8, 0x50, 0x81, 0xdb, 0x3b,
	0x77, 0xa3, 0x31, 0x16, 0x0d, 0x35, 0xae, 0x33, 0x74, 0xcd, 0x02, 0xe7, 0x17, 0xb0, 0xf6, 0xb2,
	0x2d, 0xf0, 0x19, 0x86, 0xa7, 0xc8, 0x93, 0x42, 0x78, 0x8d, 0x85, 0xf0, 0x5e, 0x9d, 0xbc, 0xcb,
	0x41, 0x2f, 0xdf, 0x1c, 0x74, 0xb3, 0x10, 0x74, 0xe7, 0x01, 0x34, 0x8a, 0x9e, 0xdd, 0x05, 0x73,
	0x84, 0x5c, 0xd8, 0x86, 0x7a, 0xc9, 0x0a, 0x5d, 0x95, 0x75, 0x1e, 0x55, 0x6a, 0xe7, 0x4f, 0x03,
	0x2a, 0xaa, 0x45, 0xc8, 0x96, 0x2c, 0x1d, 0xd7, 0x43, 0x9e, 0x35, 0x62, 0x53, 0x2f, 0x39, 0x50,
	0x18, 0xcd, 0x74, 0x64, 0x13, 0xcc, 0x53, 0xe6, 0x4d, 0xd5, 0xc1, 0x1b, 0x3d, 0xc8, 0x7a, 0x8c,
	0x79, 0x53, 0xaa, 0x70, 0xd2, 0x07, 0x6b, 0xb4, 0x14, 0x05, 0xbb, 0xac, 0x8e, 0xb0, 0x91, 0x77,
	0xc6, 0xa2, 0x96, 0x5e, 0xe2, 0x93, 0x17, 0x70, 0xa7, 0x10, 0x63, 0x6f, 0x79, 0x85, 0x6d, 0xde,
	0x68, 0xef, 0xc6, 0xb5, 0xce, 0xaf, 0x06, 0x54, 0xb5, 0x4b, 0x85, 0xa9, 0xc6, 0x54, 0x53, 0xcd,
	0x26, 0x40, 0x88, 0xfc, 0x22, 0x40, 0xca, 0x98, 0xc8, 0xae, 0x97, 0x02, 0x22, 0x9f, 0xca, 0x98,
	0xe3, 0x44, 0x45, 0xeb, 0xc0, 0x4d, 0xce, 0xb3, 0x0b, 0x6f, 0x11, 0x24, 0x5d, 0x30, 0xe5, 0x84,
	0xa7, 0x72, 0xd3, 0xe8, 0xb5, 0xbb, 0x7a, 0xfc, 0xeb, 0xe6, 0xe3, 0x5f, 0xf7, 0x38, 0x1f, 0xff,
	0xa8, 0xe2, 0x39, 0xdf, 0x80, 0x29, 0xc3, 0x47, 0x76, 0xf3, 0xdd, 0x8f, 0x39, 0xe6, 0x77, 0xa1,
	0xa5, 0x5d, 0x7c, 0x36, 0xc3, 0x69, 0x81, 0x23, 0xdf, 0xd3, 0xe3, 0xd7, 0x89, 0x5d, 0xea, 0x94,
	0xe5, 0xd4, 0x76, 0xfc, 0x3a, 0x71, 0x7a, 0x00, 0x73, 0x2e, 0xd9, 0x02, 0x53, 0x79, 0x72, 0x85,
	0xad, 0xe7, 0xcc, 0x43, 0xaa, 0xb4, 0xce, 0x8b, 0x7c, 0x8d, 0xc4, 0xc8, 0x26, 0x18, 0x4f, 0xaf,
	0x5d, 0x60, 0x3c, 0x95, 0x7a, 0x9a, 0xe5, 0xfe, 0x0a, 0x3d, 0x25, 0x4d, 0x30, 0x1e, 0x65, 0x71,
	0x31, 0x1e, 0xed, 0x8c, 0xa1, 0x3e, 0x7b, 0x45, 0xc8, 0x2d, 0x58, 0x57, 0xef, 0xe0, 0x3c, 0x3b,
	0xd6, 0x0a, 0xb1, 0xf4, 0xe3, 0xf8, 0x1c, 0x5f, 0x29, 0xdc, 0x32, 0x08, 0x81, 0x96, 0x5a, 0xc3,
	0x71, 0xa0, 0xdb, 0xde, 0x2a, 0x91, 0x75, 0xfd, 0x5e, 0xe5, 0x40, 0x99, 0xb4, 0x00, 0x24, 0xa0,
	0xb3, 0x6b, 0x99, 0x3b, 0xaf, 0xa0, 0x3e, 0x2c, 0x6e, 0x34, 0xbc, 0xb4, 0x11, 0x81, 0xd6, 0x70,
	0xd1, 0xac, 0x21, 0xcd, 0x0e, 0x0b, 0x66, 0x4b, 0xd2, 0xec, 0x70, 0x6e, 0xb6, 0x9c, 0xcb, 0x7a,
	0xa6, 0xb1, 0x4c, 0x79, 0xda, 0x61, 0xf1, 0xb4, 0x95, 0x9d, 0x13, 0x68, 0x2d, 0x0e, 0x79, 0xa4,
	0x06, 0xe6, 0xa1, 0x17, 0xc8, 0x2d, 0xe5, 0xa9, 0x67, 0xdb, 0x49, 0xd7, 0x9a, 0x50, 0x9b, 0x49,
	0x25, 0xb2, 0x06, 0xf5, 0xbc, 0x3a, 0x3d, 0xab, 0x2c, 0x95, 0xf9, 0xec, 0x64, 0x99, 0x3b, 0x1f,
	0x42, 0x6b, 0xf1, 0x0d, 0x22, 0x0d, 0x58, 0x3d, 0x4a, 0x47, 0x23, 0x4c, 0x12, 0x6b, 0x85, 0x00,
	0x54, 0x1f, 0xbb, 0x7e, 0x20, 0xad, 0xee, 0x9c, 0xc1, 0x5b, 0xd7, 0xbc, 0x36, 0x72, 0x8d, 0x2c,
	0xb7, 0xef, 0x52, 0x61, 0xad, 0x48, 0xe1, 0x30, 0x9a, 0x48, 0x82, 0x65, 0x48, 0xcf, 0xfa, 0xae,
	0x97, 0x5d, 0x05, 0x3a, 0xc2, 0x4a, 0xd6, 0x5b, 0x5a, 0x65, 0xe9, 0xaa, 0xf2, 0xf1, 0x98, 0xb1,
	0xc7, 0x6e, 0x22, 0x63, 0xfc, 0x15, 0xac, 0x2d, 0x8c, 0xee, 0xd2, 0x60, 0x36, 0x6f, 0xeb, 0x13,
	0xf5, 0xdd, 0xd1, 0x45, 0x1a, 0x5b, 0x86, 0x4c, 0xc0, 0x52, 0xdf, 0x59, 0xa5, 0xde, 0x0f, 0x50,
	0x7d, 0xc2, 0x92, 0xc4, 0x8f, 0x49, 0x0f, 0x9a, 0xfa, 0xeb, 0x48, 0x70, 0x74, 0x43, 0xd2, 0xd2,
	0x85, 0x94, 0x8f, 0x79, 0xed, 0x25, 0x79, 0xdb, 0xd8, 0x35, 0x48, 0x27, 0xfb, 0x49, 0xca, 0x1e,
	0x75, 0x35, 0x1b, 0xb6, 0x8b, 0x42, 0xef, 0x67, 0x19, 0xce, 0xec, 0x78, 0x72, 0xfe, 0x3f, 0x42,
	0x3e, 0xc1, 0x79, 0xf5, 0x15, 0x66, 0xbc, 0xcc, 0xeb, 0x36, 0x29, 0x42, 0xd9, 0x3c, 0x90, 0x2f,
	0x1c, 0x2e, 0x2f, 0x1c, 0x5e, 0x5e, 0x58, 0x1c, 0x24, 0x7a, 0x81, 0xcc, 0x08, 0x0f, 0x91, 0x93,
	0x7b, 0xd0, 0x7c, 0x82, 0x62, 0xfe, 0xf3, 0xb4, 0x70, 0xe4, 0xf5, 0xa5, 0x3f, 0x0a, 0xf2, 0x00,
	0x48, 0x91, 0x9d, 0x85, 0xe4, 0xc6, 0x35, 0xbb, 0x46, 0xef, 0x77, 0x03, 0x4c, 0x29, 0x93, 0x2d,
	0xa8, 0xc9, 0xb8, 0xa8, 0x9f, 0xc4, 0xec, 0x32, 0x96, 0x72, 0x3b, 0xff, 0x66, 0xd1, 0xd8, 0x59,
	0x91, 0x47, 0x3a, 0x42, 0x31, 0xff, 0x4f, 0xcc, 0x2d, 0xe6, 0xc0, 0x42, 0x24, 0x73, 0x07, 0x66,
	0xec, 0x2b, 0x0f, 0x33, 0xd3, 0x3e, 0x84, 0xff, 0x17, 0xd9, 0x5f, 0x07, 0xc1, 0x4d, 0x3e, 0xe4,
	0xb4, 0x5d, 0xa3, 0xbf, 0x05, 0x1b, 0x23, 0x16, 0x76, 0xa7, 0x2c, 0xc1, 0x38, 0x40, 0xd4, 0x04,
	0xf9, 0x3e, 0xf6, 0x6b, 0xf2, 0x53, 0xba, 0x37, 0x30, 0x4e, 0xab, 0xea, 0xe2, 0xfc, 0xe4, 0xef,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x41, 0xf5, 0x60, 0xaf, 0x59, 0x0f, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GossipClient is the client API for Gossip service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GossipClient interface {
	GossipStream(ctx context.Context, opts ...grpc.CallOption) (Gossip_GossipStreamClient, error)
	Ping(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
}

type gossipClient struct {
	cc *grpc.ClientConn
}

func NewGossipClient(cc *grpc.ClientConn) GossipClient {
	return &gossipClient{cc}
}

func (c *gossipClient) GossipStream(ctx context.Context, opts ...grpc.CallOption) (Gossip_GossipStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Gossip_serviceDesc.Streams[0], "/plum.Gossip/GossipStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &gossipGossipStreamClient{stream}
	return x, nil
}

type Gossip_GossipStreamClient interface {
	Send(*Envelope) error
	Recv() (*Envelope, error)
	grpc.ClientStream
}

type gossipGossipStreamClient struct {
	grpc.ClientStream
}

func (x *gossipGossipStreamClient) Send(m *Envelope) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gossipGossipStreamClient) Recv() (*Envelope, error) {
	m := new(Envelope)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gossipClient) Ping(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/plum.Gossip/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GossipServer is the server API for Gossip service.
type GossipServer interface {
	GossipStream(Gossip_GossipStreamServer) error
	Ping(context.Context, *Empty) (*Empty, error)
}

// UnimplementedGossipServer can be embedded to have forward compatible implementations.
type UnimplementedGossipServer struct {
}

func (*UnimplementedGossipServer) GossipStream(srv Gossip_GossipStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GossipStream not implemented")
}
func (*UnimplementedGossipServer) Ping(ctx context.Context, req *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}

func RegisterGossipServer(s *grpc.Server, srv GossipServer) {
	s.RegisterService(&_Gossip_serviceDesc, srv)
}

func _Gossip_GossipStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GossipServer).GossipStream(&gossipGossipStreamServer{stream})
}

type Gossip_GossipStreamServer interface {
	Send(*Envelope) error
	Recv() (*Envelope, error)
	grpc.ServerStream
}

type gossipGossipStreamServer struct {
	grpc.ServerStream
}

func (x *gossipGossipStreamServer) Send(m *Envelope) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gossipGossipStreamServer) Recv() (*Envelope, error) {
	m := new(Envelope)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Gossip_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GossipServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plum.Gossip/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GossipServer).Ping(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Gossip_serviceDesc = grpc.ServiceDesc{
	ServiceName: "plum.Gossip",
	HandlerType: (*GossipServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Gossip_Ping_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GossipStream",
			Handler:       _Gossip_GossipStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "plum.proto",
}

// ConsensusClient is the client API for Consensus service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ConsensusClient interface {
	ServePBFTPhase(ctx context.Context, in *PBFTRequest, opts ...grpc.CallOption) (*PBFTResponse, error)
	ServeXBFTPhase(ctx context.Context, in *XBFTRequest, opts ...grpc.CallOption) (*XBFTResponse, error)
}

type consensusClient struct {
	cc *grpc.ClientConn
}

func NewConsensusClient(cc *grpc.ClientConn) ConsensusClient {
	return &consensusClient{cc}
}

func (c *consensusClient) ServePBFTPhase(ctx context.Context, in *PBFTRequest, opts ...grpc.CallOption) (*PBFTResponse, error) {
	out := new(PBFTResponse)
	err := c.cc.Invoke(ctx, "/plum.Consensus/ServePBFTPhase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consensusClient) ServeXBFTPhase(ctx context.Context, in *XBFTRequest, opts ...grpc.CallOption) (*XBFTResponse, error) {
	out := new(XBFTResponse)
	err := c.cc.Invoke(ctx, "/plum.Consensus/ServeXBFTPhase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConsensusServer is the server API for Consensus service.
type ConsensusServer interface {
	ServePBFTPhase(context.Context, *PBFTRequest) (*PBFTResponse, error)
	ServeXBFTPhase(context.Context, *XBFTRequest) (*XBFTResponse, error)
}

// UnimplementedConsensusServer can be embedded to have forward compatible implementations.
type UnimplementedConsensusServer struct {
}

func (*UnimplementedConsensusServer) ServePBFTPhase(ctx context.Context, req *PBFTRequest) (*PBFTResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServePBFTPhase not implemented")
}
func (*UnimplementedConsensusServer) ServeXBFTPhase(ctx context.Context, req *XBFTRequest) (*XBFTResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServeXBFTPhase not implemented")
}

func RegisterConsensusServer(s *grpc.Server, srv ConsensusServer) {
	s.RegisterService(&_Consensus_serviceDesc, srv)
}

func _Consensus_ServePBFTPhase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PBFTRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsensusServer).ServePBFTPhase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plum.Consensus/ServePBFTPhase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsensusServer).ServePBFTPhase(ctx, req.(*PBFTRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Consensus_ServeXBFTPhase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(XBFTRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsensusServer).ServeXBFTPhase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plum.Consensus/ServeXBFTPhase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsensusServer).ServeXBFTPhase(ctx, req.(*XBFTRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Consensus_serviceDesc = grpc.ServiceDesc{
	ServiceName: "plum.Consensus",
	HandlerType: (*ConsensusServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ServePBFTPhase",
			Handler:    _Consensus_ServePBFTPhase_Handler,
		},
		{
			MethodName: "ServeXBFTPhase",
			Handler:    _Consensus_ServeXBFTPhase_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "plum.proto",
}

// FarmerClient is the client API for Farmer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FarmerClient interface {
	GetPeerState(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PeerState, error)
	GetPeerStateStream(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Farmer_GetPeerStateStreamClient, error)
}

type farmerClient struct {
	cc *grpc.ClientConn
}

func NewFarmerClient(cc *grpc.ClientConn) FarmerClient {
	return &farmerClient{cc}
}

func (c *farmerClient) GetPeerState(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PeerState, error) {
	out := new(PeerState)
	err := c.cc.Invoke(ctx, "/plum.Farmer/GetPeerState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *farmerClient) GetPeerStateStream(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Farmer_GetPeerStateStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Farmer_serviceDesc.Streams[0], "/plum.Farmer/GetPeerStateStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &farmerGetPeerStateStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Farmer_GetPeerStateStreamClient interface {
	Recv() (*PeerState, error)
	grpc.ClientStream
}

type farmerGetPeerStateStreamClient struct {
	grpc.ClientStream
}

func (x *farmerGetPeerStateStreamClient) Recv() (*PeerState, error) {
	m := new(PeerState)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FarmerServer is the server API for Farmer service.
type FarmerServer interface {
	GetPeerState(context.Context, *Empty) (*PeerState, error)
	GetPeerStateStream(*Empty, Farmer_GetPeerStateStreamServer) error
}

// UnimplementedFarmerServer can be embedded to have forward compatible implementations.
type UnimplementedFarmerServer struct {
}

func (*UnimplementedFarmerServer) GetPeerState(ctx context.Context, req *Empty) (*PeerState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPeerState not implemented")
}
func (*UnimplementedFarmerServer) GetPeerStateStream(req *Empty, srv Farmer_GetPeerStateStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetPeerStateStream not implemented")
}

func RegisterFarmerServer(s *grpc.Server, srv FarmerServer) {
	s.RegisterService(&_Farmer_serviceDesc, srv)
}

func _Farmer_GetPeerState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FarmerServer).GetPeerState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plum.Farmer/GetPeerState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FarmerServer).GetPeerState(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Farmer_GetPeerStateStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FarmerServer).GetPeerStateStream(m, &farmerGetPeerStateStreamServer{stream})
}

type Farmer_GetPeerStateStreamServer interface {
	Send(*PeerState) error
	grpc.ServerStream
}

type farmerGetPeerStateStreamServer struct {
	grpc.ServerStream
}

func (x *farmerGetPeerStateStreamServer) Send(m *PeerState) error {
	return x.ServerStream.SendMsg(m)
}

var _Farmer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "plum.Farmer",
	HandlerType: (*FarmerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPeerState",
			Handler:    _Farmer_GetPeerState_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetPeerStateStream",
			Handler:       _Farmer_GetPeerStateStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "plum.proto",
}

// PeerClient is the client API for Peer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PeerClient interface {
	PingPong(ctx context.Context, in *Ping, opts ...grpc.CallOption) (*Pong, error)
	SetPublicKey(ctx context.Context, in *PublicKey, opts ...grpc.CallOption) (*Empty, error)
	GetPublicKey(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PublicKey, error)
	GetPublicKeyAllStream(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Peer_GetPublicKeyAllStreamClient, error)
}

type peerClient struct {
	cc *grpc.ClientConn
}

func NewPeerClient(cc *grpc.ClientConn) PeerClient {
	return &peerClient{cc}
}

func (c *peerClient) PingPong(ctx context.Context, in *Ping, opts ...grpc.CallOption) (*Pong, error) {
	out := new(Pong)
	err := c.cc.Invoke(ctx, "/plum.Peer/PingPong", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *peerClient) SetPublicKey(ctx context.Context, in *PublicKey, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/plum.Peer/SetPublicKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *peerClient) GetPublicKey(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PublicKey, error) {
	out := new(PublicKey)
	err := c.cc.Invoke(ctx, "/plum.Peer/GetPublicKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *peerClient) GetPublicKeyAllStream(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Peer_GetPublicKeyAllStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Peer_serviceDesc.Streams[0], "/plum.Peer/GetPublicKeyAllStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &peerGetPublicKeyAllStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Peer_GetPublicKeyAllStreamClient interface {
	Recv() (*PublicKey, error)
	grpc.ClientStream
}

type peerGetPublicKeyAllStreamClient struct {
	grpc.ClientStream
}

func (x *peerGetPublicKeyAllStreamClient) Recv() (*PublicKey, error) {
	m := new(PublicKey)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PeerServer is the server API for Peer service.
type PeerServer interface {
	PingPong(context.Context, *Ping) (*Pong, error)
	SetPublicKey(context.Context, *PublicKey) (*Empty, error)
	GetPublicKey(context.Context, *Empty) (*PublicKey, error)
	GetPublicKeyAllStream(*Empty, Peer_GetPublicKeyAllStreamServer) error
}

// UnimplementedPeerServer can be embedded to have forward compatible implementations.
type UnimplementedPeerServer struct {
}

func (*UnimplementedPeerServer) PingPong(ctx context.Context, req *Ping) (*Pong, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PingPong not implemented")
}
func (*UnimplementedPeerServer) SetPublicKey(ctx context.Context, req *PublicKey) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPublicKey not implemented")
}
func (*UnimplementedPeerServer) GetPublicKey(ctx context.Context, req *Empty) (*PublicKey, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPublicKey not implemented")
}
func (*UnimplementedPeerServer) GetPublicKeyAllStream(req *Empty, srv Peer_GetPublicKeyAllStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetPublicKeyAllStream not implemented")
}

func RegisterPeerServer(s *grpc.Server, srv PeerServer) {
	s.RegisterService(&_Peer_serviceDesc, srv)
}

func _Peer_PingPong_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ping)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeerServer).PingPong(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plum.Peer/PingPong",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeerServer).PingPong(ctx, req.(*Ping))
	}
	return interceptor(ctx, in, info, handler)
}

func _Peer_SetPublicKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeerServer).SetPublicKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plum.Peer/SetPublicKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeerServer).SetPublicKey(ctx, req.(*PublicKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _Peer_GetPublicKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeerServer).GetPublicKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plum.Peer/GetPublicKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeerServer).GetPublicKey(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Peer_GetPublicKeyAllStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PeerServer).GetPublicKeyAllStream(m, &peerGetPublicKeyAllStreamServer{stream})
}

type Peer_GetPublicKeyAllStreamServer interface {
	Send(*PublicKey) error
	grpc.ServerStream
}

type peerGetPublicKeyAllStreamServer struct {
	grpc.ServerStream
}

func (x *peerGetPublicKeyAllStreamServer) Send(m *PublicKey) error {
	return x.ServerStream.SendMsg(m)
}

var _Peer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "plum.Peer",
	HandlerType: (*PeerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PingPong",
			Handler:    _Peer_PingPong_Handler,
		},
		{
			MethodName: "SetPublicKey",
			Handler:    _Peer_SetPublicKey_Handler,
		},
		{
			MethodName: "GetPublicKey",
			Handler:    _Peer_GetPublicKey_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetPublicKeyAllStream",
			Handler:       _Peer_GetPublicKeyAllStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "plum.proto",
}
