syntax = "proto3";

option java_multiple_files = true;
option java_package = "plum";
option java_outer_classname = "plumNetwork";
option objc_class_prefix = "PN";

package plum;

// service definition for test ... say Hello
service Test {
    rpc SayHello(HelloRequest) returns (HelloReply) {}
}

// service for networking
service PlumService {
    // is alive?
    rpc sayHello(HelloRequest) returns (HelloReply) {}

    // networking
    rpc getIP(CommonRequest) returns (IPAddress) {}

    // address which peer have related features
    rpc addAddress(IPAddress) returns (CommonResponse) {}
    rpc setAddressBook(stream IPAddress) returns (CommonResponse) {}
    rpc getAddressBook(CommonRequest) returns (stream IPAddress) {}
    rpc clearAddressBook(CommonRequest) returns (CommonResponse) {}

    // simple transaction and gossip
    rpc addTransaction(Transaction) returns (TransactionResponse) {}
    rpc getMemPool(CommonRequest) returns (stream Transaction) {}
    
    // unary block build method
    rpc buildBlock(CommonRequest) returns (CommonResponse) {}

    // consensus
    rpc honeyBee(CommonRequest) returns (CommonResponse) {}
}

// is alive?
message HelloRequest {
    string name = 1;
}

message HelloReply {
    string message = 1;
}

// networking
message CommonRequest {
    string request = 1;
}

message CommonResponse {
    bool success = 1;
    string error = 2;
}

message IPAddress {
    string address = 1;
    int32 port = 2;
}

// simple transaction and gossip
message Transaction {
    int64 idx = 1; // for test(tracable). may transaction overflow
    string transaction = 2;
    int64 time = 3;
}

message TransactionResponse {
    string success = 1;
}

// block header
message BlockHeader {
    // idx type can be changed as its possibility of overflow. considering string type
    // but int64 is sufficient considering limitations in this system 
    // as its max value is 9223372036854775807
    int64 idx = 1;
    string maker = 2;
    string merkleRoot = 3;
    string prevBlockHash = 4;
    
    // actual data
    BlockBody body = 5;

}

// block body based on merkle tree
message BlockBody {
    string root = 1;
    // tree structure is JSON expression
    string tree = 2;
}